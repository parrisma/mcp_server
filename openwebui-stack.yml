version: "3.8"

services:
  traefik:
    image: traefik:v2.10
    ports:
      - "80:80"
      - "443:443"
    command:
      - "--api.dashboard=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--tracing=true"
      - "--tracing.servicename=traefik"
      - "--providers.docker.defaultrule=Host(`{{ .Name }}.test`)"
      - "--tracing.jaeger.localAgentHostPort=jaeger:6831"
      - "--ping=true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik_logs:/var/log/traefik
    networks:
      - proxy
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        traefik.enable: "true"
        # Traefik Dashboard accessible via http://traefik.test
        traefik.http.routers.api.rule: Host(`traefik.test`)
        traefik.http.routers.api.service: api@internal
        traefik.http.routers.api.entrypoints: http
        traefik.http.services.traefik.loadbalancer.server.port: "8080"

  postgresql:
    image: postgres:16
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_DB: keycloak
      POSTGRES_PASSWORD: SUPERsecret
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - home-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      placement:
        constraints: [node.role == manager]
    depends_on:
      - traefik

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.3
    command: start
    environment:
      KC_PROXY_ADDRESS_FORWARDING: "true"
      KC_HOSTNAME_STRICT: "false"
      # --- IMPORTANT: Use a local test domain that matches Traefik rule ---
      KC_HOSTNAME: keycloak.test
      KC_PROXY: edge
      KC_HTTP_ENABLED: "true" # Keycloak itself serves HTTP internally
      KC_DB: postgres
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: SUPERsecret
      KC_DB_URL_HOST: postgresql
      KC_DB_URL_PORT: "5432"
      KC_DB_URL_DATABASE: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
    networks:
      - proxy
      - home-net
    healthcheck:
      test: ["CMD", "/opt/keycloak/bin/kc.sh", "--help"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        traefik.enable: "true"
        # --- HTTP router to redirect to HTTPS (optional, but good practice) ---
        traefik.http.routers.keycloak-http.entrypoints: http
        traefik.http.routers.keycloak-http.rule: Host(`keycloak.test`)
        traefik.http.middlewares.keycloak-https-redirect.redirectscheme.scheme: https
        traefik.http.routers.keycloak-http.middlewares: keycloak-https-redirect
        # --- HTTPS router for Keycloak, using Traefik's default self-signed cert ---
        traefik.http.routers.keycloak-secure.entrypoints: https
        traefik.http.routers.keycloak-secure.rule: Host(`keycloak.test`)
        traefik.http.routers.keycloak-secure.tls: "true"
        # --- Removed: traefik.http.routers.keycloak-secure.tls.certresolver: myresolver ---
        # --- Traefik will now use its default self-signed certificate for this router ---
        traefik.http.routers.keycloak-secure.service: keycloak
        traefik.http.services.keycloak.loadbalancer.server.port: "8080" # Keycloak's internal HTTP port
        traefik.docker.network: proxy
    depends_on:
      - traefik

  openwebui:
    image: ghcr.io/open-webui/open-webui:git-5eca495-cuda
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        traefik.enable: "true"
        # HTTP → HTTPS redirect (optional but recommended)
        traefik.http.routers.openwebui-http.entrypoints: http
        traefik.http.routers.openwebui-http.rule: Host(`openwebui.test`)
        traefik.http.middlewares.openwebui-https-redirect.redirectscheme.scheme: https
        traefik.http.routers.openwebui-http.middlewares: openwebui-https-redirect

        # HTTPS router
        traefik.http.routers.openwebui-secure.entrypoints: https
        traefik.http.routers.openwebui-secure.rule: Host(`openwebui.test`)
        traefik.http.routers.openwebui-secure.tls: "true"
        traefik.http.routers.openwebui-secure.service: openwebui
        traefik.http.services.openwebui.loadbalancer.server.port: "8080"
        traefik.docker.network: proxy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - proxy
      - home-net
    volumes:
      - openwebui_data:/app/backend/data
    environment:
      - ENABLE_OAUTH_SIGNUP=true
      - OAUTH_CLIENT_ID=openwebui
      - OAUTH_CLIENT_SECRET=Ppw64yIeodS9O3QifhMnOjzCj6uBnck0
      - OPENID_PROVIDER_URL=http://keycloak:8080/realms/openwebui/.well-known/openid-configuration
      - OAUTH_PROVIDER_NAME=Keycloak
      - OPENID_REDIRECT_URI=https://openwebui.test/oauth/oidc/callback
    depends_on:
      - traefik
      - keycloak
      - python-mcp
      - python-mcpo

  portainer:
    image: portainer/portainer-ce:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
      labels:
        traefik.enable: "true"
        # HTTP → HTTPS redirect (optional but recommended)
        traefik.http.routers.portainer-http.entrypoints: http
        traefik.http.routers.portainer-http.rule: Host(`portainer.test`)
        traefik.http.middlewares.portainer-https-redirect.redirectscheme.scheme: https
        traefik.http.routers.portainer-http.middlewares: portainer-https-redirect

        # HTTPS router
        traefik.http.routers.portainer-secure.entrypoints: https
        traefik.http.routers.portainer-secure.rule: Host(`portainer.test`)
        traefik.http.routers.portainer-secure.tls: "true"
        traefik.http.routers.portainer-secure.service: portainer
        traefik.http.services.portainer.loadbalancer.server.port: "9000"
        traefik.docker.network: proxy
    healthcheck:
      test: ["CMD", "/portainer", "--help"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    depends_on:
      - traefik

  python-mcp:
    image: python-mcp:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    ports:
      - "9123:9123"
    environment:
      - MCP_SERVER=1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9123/mcp || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 90s
    networks:
      - home-net
    depends_on:
      - traefik

  python-mcpo:
    image: python-mcp:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    ports:
      - "8123:8123"
    environment:
      - MCPO_PROXY=true
      - MCPO_HOST=0.0.0.0
      - MCPO_PORT=8123
      - MCPO_SERVER_TYPE=streamable_http
      - MCPO_TARGET_URL=http://python-mcp:9123/mcp
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8123/docs || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 90s
    networks:
      - home-net
    depends_on:
      - python-mcp

networks:
  proxy:
    external: true
  home-net:
    external: true

volumes:
  postgresql_data:
  openwebui_data:
  portainer_data:
  traefik_logs:
