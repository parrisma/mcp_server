services:
  # PostgreSQL for Keycloak
  postgresql:
    image: postgres:16
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_DB: keycloak
      POSTGRES_PASSWORD: SUPERsecret
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - home-net
    ports:
      - "5432:5432" # Expose for debugging if needed
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Keycloak for OAuth - simplified config
  keycloak:
    image: quay.io/keycloak/keycloak:22.0.3
    command: start-dev # Development mode - simpler setup
    environment:
      KC_DB: postgres
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: SUPERsecret
      KC_DB_URL_HOST: postgresql
      KC_DB_URL_PORT: "5432"
      KC_DB_URL_DATABASE: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME: "localhost:8081"
      KC_PROXY: "edge"
      KC_PROXY_ADDRESS_FORWARDING: "true"
    ports:
      - "8081:8080" # Direct port access - no Traefik needed
    networks:
      - home-net
    depends_on:
      - postgresql
    healthcheck:
      test: ["CMD-SHELL", "bash -c '</dev/tcp/localhost/8080' || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 10
      start_period: 40s

  # Your MCP Server
  python-mcp:
    image: python-mcp:latest
    ports:
      - "9123:9123"
      - "8312:8312" # MCP Proxy Web Server
    environment:
      - MCP_SERVER=1
      - MCP_SERVER_URL=http://python-mcp:9123/mcp
    networks:
      - home-net
    #healthcheck:
    #  test: ["CMD-SHELL", "python mcp_server/mcp_healthcheck.py"]
    #  interval: 30s
    #  timeout: 5s
    #  retries: 3
    #  start_period: 10s

  # OpenWebUI with OAuth
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    ports:
      - "8080:8080" # Direct port access
    volumes:
      - openwebui_data:/app/backend/data
    environment:
      - WEBUI_SECRET_KEY=simple-dev-key-change-in-production
      - ENABLE_OAUTH_SIGNUP=true
      - OAUTH_CLIENT_ID=open-webui
      - OAUTH_CLIENT_SECRET=xifWYFC6xXRfjrKcSeOwXrbgUEJDAkxM
      - OAUTH_MERGE_ACCOUNTS_BY_EMAIL=true
      - OPENID_PROVIDER_URL=http://keycloak:8080/realms/openwebui/.well-known/openid-configuration
      - OPENID_REDIRECT_URI=http://localhost:8080/oauth/oidc/callback
      - OAUTH_PROVIDER_NAME=Keycloak
      - GLOBAL_LOG_LEVEL=INFO
      - ENABLE_FORWARD_USER_INFO_HEADERS=true
      - LITELLM_API_KEY=<REDACTED>
      # Configure LiteLLM as OpenAI provider
      - OPENAI_API_BASE_URL=http://litellm:4000/v1
      - OPENAI_API_KEY=<REDACTED>
    networks:
      - home-net
    depends_on:
      - keycloak
      - litellm

  # PostgreSQL for LiteLLM
  postgresql-litellm:
    image: postgres:16
    environment:
      POSTGRES_USER: litellm
      POSTGRES_DB: litellm
      POSTGRES_PASSWORD: SUPERsecret
    volumes:
      - postgresql_data_litellm:/var/lib/postgresql/data
    networks:
      - home-net
    ports:
      - "5433:5432" # Use different port to avoid conflicts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U litellm -d litellm"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  litellm:
    image: ghcr.io/berriai/litellm:main-stable
    command: --config /app/config.yaml --detailed_debug
    volumes:
      - ../litellm/litellm-config.yaml:/app/config.yaml
    ports:
      - "4000:4000"
    networks:
      - home-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    environment:
      - LITELLM_MASTER_KEY=<REDACTED>
      - DATABASE_URL=postgresql://litellm:SUPERsecret@postgresql-litellm:5432/litellm
    depends_on:
      - postgresql-litellm

  # Sidecar: OpenWebUI -> LiteLLM MCP adapter
  openweb-to-litellm:
    image: python-mcp:latest
    environment:
      - OPENWEB_TO_LITELLM=true
      - ADAPTER_HOST=0.0.0.0
      - ADAPTER_PORT=8088
      - ADAPTER_LITELLM_URL=http://litellm:4000/mcp-rest/tools/call
      - ADAPTER_TIMEOUT=30
      - ADAPTER_LOG_LEVEL=debug
      - ADAPTER_ENABLE_CORS=true
      - ADAPTER_CORS_ALLOW_ORIGINS=*
    networks:
      - home-net
    depends_on:
      - litellm
      - python-mcp
    ports:
      - "8088:8088"

  nginx-mcp:
    image: nginx:alpine
    ports:
      - "9000:80"
    volumes:
      - ../mcp:/usr/share/nginx/html/mcp:ro
      - ../nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - home-net
      - proxy

  # HashiCorp Vault (development mode)
  vault:
    image: hashicorp/vault:1.16.3
    command: >-
      server -dev -dev-root-token-id=root -dev-listen-address=0.0.0.0:8200
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root
      - VAULT_ADDR=http://0.0.0.0:8200
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    networks:
      - home-net
    volumes:
      - vault_data:/vault/file

networks:
  proxy:
    external: true
  home-net:
    external: true

volumes:
  postgresql_data:
  openwebui_data:
  postgresql_data_litellm:
  vault_data:
